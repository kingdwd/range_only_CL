#include "AncLocalization.h"
#include "gtest/gtest.h"

using namespace Eigen;

TEST(MDSTEST, MDS2D) {
	MatrixXd M(4, 4);
	M << 0, 10.069600845422377, 9.807393163307264, 14.186787598954337,
		10.069600845422377, 0, 13.992090508995926, 9.915026789289168,
		9.807393163307264, 13.992090508995926, 0, 10.099096200653559,
		14.186787598954337, 9.915026789289168, 10.099096200653559, 0;
	int dim = 2;
	MatrixXd coor = MDS(M, dim);

	MatrixXd expected_coor(4, 2);
	expected_coor << 6.218565876147193, 3.362444433706466,
		-3.462533628270152, 6.094890962788657,
		3.491124103285699, -6.046988527320912,
		-6.247156351162737, -3.410346869174208;

	EXPECT_TRUE(coor.isApprox(expected_coor, 1e-6));
}

TEST(ADAMTEST, ADAM2D) {
	MatrixXd M(4, 4);
	M << 0, 10.069600845422377, 9.807393163307264, 14.186787598954337,
		10.069600845422377, 0, 13.992090508995926, 9.915026789289168,
		9.807393163307264, 13.992090508995926, 0, 10.099096200653559,
		14.186787598954337, 9.915026789289168, 10.099096200653559, 0;
	int dim = 2;
	MatrixXd coor = MDS_Adam(M, dim, 1e-5);

	MatrixXd expected_coor(4, 2);
	expected_coor << 0, 0,
					10.064288031227434, 0,
					0.069292544831877, 9.801931197800947,
					10.162460112967693, 9.909377279308197;

	EXPECT_TRUE(coor.isApprox(expected_coor, 1e-5));
}

TEST(ADAMTEST, ADAM3D) {
	MatrixXd M(8, 8);
	M <<0, 10.069600845422377, 9.807393163307264, 13.931790051309735, 4.172121535469124, 10.887480730728791, 10.833856198347814, 14.824133781703555,
		10.069600845422377, 0, 13.992090508995926, 9.982266727168284, 10.716682791066486, 4.324085908176913, 14.602531358446438, 10.807301061427033,
		9.807393163307264, 13.992090508995926, 0, 10.113969925026623, 10.882489885602000, 14.813126499013752, 4.186492883189786, 10.976417633729829,
		13.931790051309735, 9.982266727168284, 10.113969925026623, 0, 14.721584123164758, 10.907909443401273, 10.895718120493097, 4.346691459881773,
		4.172121535469124, 10.716682791066486, 10.882489885602000, 14.721584123164758, 0, 10.053735022842407, 9.937878907886695, 14.077983311016419,
		10.887480730728791, 4.324085908176913, 14.813126499013752, 10.907909443401273, 10.053735022842407, 0, 14.079025928916570, 9.820170748320562,
		10.833856198347814, 14.602531358446438, 4.186492883189786, 10.895718120493097, 9.937878907886695, 14.079025928916570, 0, 10.019003672753831,
		14.824133781703555, 10.807301061427033, 10.976417633729829, 4.346691459881773, 14.077983311016418, 9.820170748320562, 10.019003672753831, 0;


	int dim = 3;
	MatrixXd coor = MDS_Adam(M, dim, 1e-3);

	MatrixXd expected_coor(8, 3);
	expected_coor << 0, 0, 0,
		9.964276180015370, 0, 0,
		-0.096764001901947, 9.848257800316835, 0,
		9.957501223278884, 9.927155627322312, -0.166703243326690,
		0.084348375677686, -0.092098029929188, 4.197967038379788,
		10.082339350129127, 0.033764695381249, 4.317900094762958,
		0.028652031962458, 9.890751582981499, 4.219610311247332,
		10.058556819107952, 9.911664595539756, 4.210217587685728;

	EXPECT_TRUE(coor.isApprox(expected_coor, 1e-3));
}

TEST(ICPTEST,ICP2D) {
	MatrixXd coor_r(4, 2);
	coor_r << 0, 0,
		10.064288031227434, 0,
		0.069292544831877, 9.801931197800947,
		10.162460112967693, 9.909377279308197;
	MatrixXd coor_ap(2, 2);
	coor_ap << 0, 0,
		9.807393163307264, 0;
	VectorXd ind(2);
	ind << 0, 2;

	MatrixXd coor_a = ICP(coor_r, coor_ap, ind);

	MatrixXd expected_coor_a(4, 2);
	expected_coor_a << 0.002608522273532, -0.000000000000000,
		0.073753961934634, -10.064036561038677,
		9.804784641033731, 0.000000000000000,
		9.983577629793022, -10.092155829458365;

	EXPECT_TRUE(coor_a.isApprox(expected_coor_a, 1e-6));
}

TEST(ICPTEST, ICP3D) {
	MatrixXd coor_r(8, 3);
	coor_r << 0, 0, 0,
		9.964276180015370, 0, 0,
		-0.096764001901947, 9.848257800316835, 0,
		9.957501223278884, 9.927155627322312, -0.166703243326690,
		0.084348375677686, -0.092098029929188, 4.197967038379788,
		10.082339350129127, 0.033764695381249, 4.317900094762958,
		0.028652031962458, 9.890751582981499, 4.219610311247332,
		10.058556819107952, 9.911664595539756, 4.210217587685728;
	MatrixXd coor_ap(4, 3);
	coor_ap << 0.002608522273532, 0.000000000000000, 1.000000000000000,
		0.073753961934634, 10.064036561038677, 1.000000000000000,
		9.804784641033731, -0.000000000000000, 1.000000000000000,
		9.983577629793022, 10.092155829458365, 5.300000000000000;
	VectorXd ind(4);
	ind << 0,1,2,7;

	MatrixXd coor_a = ICP(coor_r, coor_ap, ind);

	MatrixXd expected_coor_a(8, 3);
	expected_coor_a << 0.010197189007157, 0.081061261525029, 0.987166230979834,
		0.048676092800244, 10.045178992164752, 1.028117611122982,
		9.857963097899209, -0.053853652109664, 1.016313157197192,
		9.976189144188290, 10.000629220949797, 0.891169982972054,
		-0.094234477362444, 0.148561038701169, 5.185149289313910,
		0.069874135852068, 10.145413923707798, 5.346548321070149,
		9.888214945845895, 0.054103019279744, 5.236511762085185,
		9.947888375328311, 10.083805788916919, 5.268403000699992;

	EXPECT_TRUE(coor_a.isApprox(expected_coor_a, 1e-6));
}

TEST(AncSelfLocalizeTEST, Accuracy) {
	MatrixXd M(8, 8);
	M << 0, 10.069600845422377, 9.807393163307264, 13.931790051309735, 4.172121535469124, 10.887480730728791, 10.833856198347814, 14.824133781703555,
		10.069600845422377, 0, 13.992090508995926, 9.982266727168284, 10.716682791066486, 4.324085908176913, 14.602531358446438, 10.807301061427033,
		9.807393163307264, 13.992090508995926, 0, 10.113969925026623, 10.882489885602000, 14.813126499013752, 4.186492883189786, 10.976417633729829,
		13.931790051309735, 9.982266727168284, 10.113969925026623, 0, 14.721584123164758, 10.907909443401273, 10.895718120493097, 4.346691459881773,
		4.172121535469124, 10.716682791066486, 10.882489885602000, 14.721584123164758, 0, 10.053735022842407, 9.937878907886695, 14.077983311016419,
		10.887480730728791, 4.324085908176913, 14.813126499013752, 10.907909443401273, 10.053735022842407, 0, 14.079025928916570, 9.820170748320562,
		10.833856198347814, 14.602531358446438, 4.186492883189786, 10.895718120493097, 9.937878907886695, 14.079025928916570, 0, 10.019003672753831,
		14.824133781703555, 10.807301061427033, 10.976417633729829, 4.346691459881773, 14.077983311016418, 9.820170748320562, 10.019003672753831, 0;

	VectorXd height(4);
	height << 1, 1, 1, 5.3;
	VectorXd hIndex(4);
	hIndex << 0, 2, 1, 7;

	MatrixXd coor = AncSelfLocalize(M, height, hIndex);

	std::cerr << coor << std::endl;

	MatrixXd expected_coor(8, 3);
	expected_coor << 0, 0, 1,
		0, 10, 1,
		10, 0, 1,
		10, 10, 1,
		0, 0, 5.2,
		0, 10, 5.3,
		10, 0, 5.1,
		10, 10, 5.3;

	MatrixXd error = (expected_coor - coor).rowwise().norm();
	double e = error.mean();

	EXPECT_TRUE(e < 0.2);
}